# 1
k <- 4
p_A <- 0.55
# 2
s <- rbinom(2*k-1,1,p_A)
# 3
o <- ifelse(sum(s) > k - 1, "A", "B")
# OR: o <- 1*(sum(s)>=4)
# 4
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
# try the simpler version :
# s_star <- if(o==1){s}else{1-s}
# n <- which(cumsum(s_star) == 4)[1]
# 5
simulate <- function(k, p_A){
s <- rbinom(2*k-1,1,p_A)
o <- ifelse(sum(s) > k - 1, "A", "B")
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
return(list(o = o, n = n))
}
# 6
rsimulate <- function(R, k, p_A){
t(replicate(r, simulate(k, p_A)))
# rsimulate <- function(R, k, p_A){
# o <- rep(NA, R)
# n <- rep(NA, R)
# for (i in 1:R) {
#    result <- simulate(k, p_A)
#    o[i] <- result$o
#    n[i] <- result$n
# }
# return(data.frame(outcome = o, number_games = n))
#}
# 1
k <- 4
p_A <- 0.55
# 2
s <- rbinom(2*k-1,1,p_A)
# 3
o <- ifelse(sum(s) > k - 1, "A", "B")
# OR: o <- 1*(sum(s)>=4)
# 4
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
# try the simpler version :
# s_star <- if(o==1){s}else{1-s}
# n <- which(cumsum(s_star) == 4)[1]
# 5
simulate <- function(k, p_A){
s <- rbinom(2*k-1,1,p_A)
o <- ifelse(sum(s) > k - 1, "A", "B")
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
return(list(o = o, n = n))
}
# 6
rsimulate <- function(R, k, p_A){
t(replicate(r, simulate(k, p_A)))
}
# rsimulate <- function(R, k, p_A){
# o <- rep(NA, R)
# n <- rep(NA, R)
# for (i in 1:R) {
#    result <- simulate(k, p_A)
#    o[i] <- result$o
#    n[i] <- result$n
# }
# return(data.frame(outcome = o, number_games = n))
#}
R <- 5000
k <- 6
p_A <- 0.33
world_series_simulation <- rsimulate(R, k, p_A)
R <- 5000
k <- 6
p_A <- 0.33
world_series_simulation <- rsimulate(r, k, p_A)
r <- 5000
k <- 6
p_A <- 0.33
world_series_simulation <- rsimulate(r, k, p_A)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$outcome, world_series_simulation$number_games )
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$o, world_series_simulation$n)
world_series_simulation <- rsimulate(r, k, p_A)
world_series_simulation(r, k, p_A)
r <- 5000
k <- 6
p_A <- 0.33
world_series_simulation <- rsimulate(r, k, p_A)
rsimulate(r, k, p_A)
# 1
k <- 4
p_A <- 0.55
# 2
s <- rbinom(2*k-1,1,p_A)
# 3
o <- ifelse(sum(s) > k - 1, "A", "B")
# OR: o <- 1*(sum(s)>=4)
# 4
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
# try the simpler version :
# s_star <- if(o==1){s}else{1-s}
# n <- which(cumsum(s_star) == 4)[1]
# 5
simulate <- function(k, p_A){
s <- rbinom(2*k-1,1,p_A)
o <- ifelse(sum(s) > k - 1, "A", "B")
n1 <- cumsum(s)
n2 <- cumsum(1-s)
n <- if (k %in% n1) {
min(which(n1 == k))
} else {
min(which(n2 == k))
}
return(list(o = o, n = n))
}
# 6
rsimulate <- function(R, k, p_A){
t(replicate(r, simulate(k, p_A)))
return(data.frame(outcome = o, number_games = n))
}
# rsimulate <- function(R, k, p_A){
# o <- rep(NA, R)
# n <- rep(NA, R)
# for (i in 1:R) {
#    result <- simulate(k, p_A)
#    o[i] <- result$o
#    n[i] <- result$n
# }
# return(data.frame(outcome = o, number_games = n))
#}
rsimulate(r, k, p_A)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$o, world_series_simulation$n)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$outcome, world_series_simulation$number_games)
r <- 5000
k <- 6
p_A <- 0.33
world_series_simulation <- rsimulate(r, k, p_A)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$outcome, world_series_simulation$number_games)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$outcome, world_series_simulation$number_games)
table(world_series_simulation)
gmodels::CrossTable(world_series_simulation$o, world_series_simulation$n)
rsimulate(r, k, p_A)
