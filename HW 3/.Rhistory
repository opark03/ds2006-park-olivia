matrix(data = 1:50, nrow = 4, ncol = 5)
matrix(data = 1:20, nrow = 4, ncol = 5)
matrix(data = 1:20, nrow = 4, ncol = 5)
seq(from 22, to 44)
seq(22, 44)
cbind?
cbind?
seq?
,,
a <- cbind(2, 1:10)
a <- cbind(2, 1:10)
a
a <- cbind(1, 1:10)
a
a <- cbind(1, 1:10)
a
a <- cbind(1, 1:10)
a
a <- cbind(3, 1:10)
a
a <- cbind(1, 1:10)
a
a <- cbind(0, 1:10)
a
a <- cbind(1, 1:10)
a
v3[3]
d1 <- read.csv("http://hbiostat.org/data/repo/2.20.Framingham.csv")
d1 <- read.csv("http://hbiostat.org/data/repo/2.20.Framingham.csv")
d1[:,4]
d1 <- read.csv("http://hbiostat.org/data/repo/2.20.Framingham.csv")
d1[ ,4]
a <- cbind(1:10)
a
a <- cbind(1 ,1:10)
a
d1[5, ]
d1[bmi]
d1["bmi"]
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
require(magrittr)
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex2) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
require(magrittr)
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex2) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
seq(22, 44)
library(magrittr)
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
require(magrittr)
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex2) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
require(dplyr)
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
# New base R pipe
d1 |>
pull(age) |>
sqrt() |> # Note the parentheses have to be used
log(base=10) |>
sum()
d1 |>
lm(sbp ~ dbp, data = _) # Use `_` instead of `.` with new pipe
require(dplyr)
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
# New base R pipe
d1 |>
pull(age) |>
sqrt() |> # Note the parentheses have to be used
log(base=10) |>
sum()
d1 |>
lm(sbp ~ dbp, data = _) # Use `_` instead of `.` with new pipe
require(dplyr)
# Old way
sum(log(sqrt(select(d1,age)),base=10))
# OG magrittr pipe
d1 %>%
pull(age)  %>%
sqrt  %>%
log(base=10)  %>%
sum
d1 %>%
lm(sbp ~ dbp, data = .)  # Use the dot if the piped objects needs to go to an input other than the first
d1 %>%
split(.$sex) %>%  # Can use the input multiple times
lapply(function(x){x$age %>% mean})
# New base R pipe
d1 |>
pull(age) |>
sqrt() |> # Note the parentheses have to be used
log(base=10) |>
sum()
d1 |>
lm(sbp ~ dbp, data = _) # Use `_` instead of `.` with new pipe
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in ???){
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in ???){
library(primes)
install.packages(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in ???){
install.packages(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in ???){
library(primes)
library(primes)
library(primes)
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
library(primes)
install.packages("devtools")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
# Iterate over all possible last four digits (0000 to 9999)
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
# Iterate over all possible last four digits (0000 to 9999)
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
prime_phonenumbers <- c(prime_phonenumbers, phone_number)
}
prime_phonenumbers
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
# Iterate over all possible last four digits (0000 to 9999)
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
# Iterate over all possible last four digits (0000 to 9999)
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- k + prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
k <- prime(phone_number)
}
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if prime(phone_number) {
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
library(primes)
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
install.packages("primes")
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
install.packages("primes")
library(primes)
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(prime_phonenumbers, phone_number)
}
}
prime_phonenumbers
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
install.packages("primes")
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x %% i == 0) return(FALSE)
TRUE
}
k <- 0
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
k <- k + 1
}
}
k
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(phone_number)
}
}
prime_phonenumbers
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
while(prime(phone_number)) {
prime_phonenumbers <- c(phone_number)
}
}
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(phone_number)
}
}
prime_phonenumbers
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(prime_phonenumbers, phone_number)
}
}
prime_phonenumbers
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(prime_phonenumbers, phone_number)
}
}
prime_phonenumbers
prime <- function(x){
ps <- primes::generate_primes(min = 2, max = ceiling(sqrt(x)))
for(i in ps) if(x%%i == 0) return(FALSE)
TRUE
}
prime_phonenumbers <- c()
for(i in 0:9999){
phone_number <- 4349240000 + i
if(prime(phone_number)) {
prime_phonenumbers <- c(prime_phonenumbers, phone_number)
}
}
prime_phonenumbers
