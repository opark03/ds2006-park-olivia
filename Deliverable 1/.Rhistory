w <- martingale_wager(l1[i-1,2], l1[i-1,3], mw, l1[i-1,4])
e <- ifelse(l1[i,3]==1, l1[i-1,4] + w, l1[i-1,4] - w)
s <- e <= 0 | e >= wt
l1[i,c(1,2,4)] <- c(l1[i-1,4], w, e)
if(s) break
}
l1[1:i,]
}
#one_series(100,100,200,50)[,4] |> plot(type = "l", xlim = c(0,100), ylim = c(0,300))
#replicate(5000, one_series(100,100,200,50) |> profit()) |> mean()
#sb <- seq(50, 500, by = 50)
#ae <- 0*sb
#for(i in 1:length(sb)){
# ae[i] <- replicate(5000, one_series(100,sb[i],sb[i]+100,50) |> profit()) |> mean()
#}
#plot(sb, ae, type = "l")
sb <- seq(50, 500, by = 50)
ng <- 0*sb
for(i in 1:length(sb)){
ng[i] <- replicate(5000, one_series(100,sb[i],sb[i] +100,50) |> nrow()) |> mean()
}
plot(sb, ng, type = "l", xlab = "Starting Budget", ylab="Average Number of Games", main = "Average Number of Games Played Before Stopping at each Starting Budget")
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
print(output)
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(1000,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
# mimics the single spin of the roulette wheel
single_spin <- function(){
possible_outcomes <- c(rep("red",18), rep("black",18), rep("green",2))
sample(possible_outcomes, 1)
}
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == "red") return(1)
min(2*previous_wager, max_wager, current_budget)
}
one_play <- function(previous_ledger_entry, max_wager){
# Create a copy of the input object that will become the output object
#updates the game index and starting budget
out <- previous_ledger_entry
out[1, "game_index"] <- previous_ledger_entry[1, "game_index"] + 1
out[1, "starting_budget"] <- previous_ledger_entry[1, "ending_budget"]
out[1, "wager"] <- martingale_wager(
previous_wager = previous_ledger_entry[1, "wager"]
, previous_outcome = previous_ledger_entry[1, "outcome"]
, max_wager = max_wager
, current_budget = out[1, "starting_budget"]
)
out[1, "outcome"] <- single_spin()
out[1, "ending_budget"] <- out[1, "starting_budget"] +
ifelse(out[1, "outcome"] == "red", +1, -1)*out[1, "wager"]
return(out)
}
stopping_rule <- function(
ledger_entry
, winning_threshold
){
ending_budget <- ledger_entry[1, "ending_budget"]
if(ending_budget <= 0) return(TRUE)
if(ending_budget >= winning_threshold) return(TRUE)
FALSE
}
one_series <- function(
max_games, starting_budget, winning_threshold, max_wager
){
# Initialize ledger
ledger <- data.frame(
game_index = 0:max_games
, starting_budget = NA_integer_
, wager = NA_integer_
, outcome = NA_character_
, ending_budget = NA_integer_
)
ledger[1, "wager"] <- 1
ledger[1, "outcome"] <- "red"
ledger[1, "ending_budget"] <- starting_budget
for(i in 2:nrow(ledger)){
#browser()
ledger[i,] <- one_play(ledger[i-1,], max_wager)
if(stopping_rule(ledger[i,], winning_threshold)) break
}
# Return non-empty portion of ledger
ledger[2:i, ]
}
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
profit <- function(ledger){
n <- nrow(ledger)
profit <- ledger[n, "ending_budget"] - ledger[1, "starting_budget"]
return(profit)
}
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
print(output)
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
#print(output)
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(1000,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(2)
l2 <- one_series(1000,200 ,300, 100)
plot(l2[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Winner example")
# create a graph to show how profit changes as a function of starting budget
max_games <- 1000
starting_budget <- 200
max_wager <- 100
# calculate at a number of winning thresholds rather than reapete a number of times with R
winning_thresholds <- seq(100, 500, by = 50)
# used to keep each individual profit calculation based on wager
average_profits <- numeric(length(winning_thresholds))
# modify code from above to produce an output that we can graph
for (i in seq_along(winning_thresholds)) {
winning_threshold <- winning_thresholds[i]
output <- rep(NA, R)
for (r in 1:R) {
output[r] <- profit(one_series(max_games, starting_budget, winning_threshold, max_wager))
}
average_profits[i] <- mean(output)
}
graph_info <- data.frame(
Winning_Threshold = winning_thresholds,
Average_Profit = average_profits
)
plot(graph_info$Winning_Threshold, graph_info$Average_Profit, type = "l", lwd = 5, xlab = "winning treshold", ylab = "average profit", main = "how does average profit change as a function of winning treshold?")
require(magrittr)
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == 1) return(1)
min(2*previous_wager, max_wager, current_budget)
}
profit <- function(l1) l1[nrow(l1),4] - l1[1,1]
one_series <- function(ng, sb, wt, mw){
# ng = max number of spins
# sb = starting budget
# wt = ending budget (starting budget + winning threshold)
# mw = max wager
l1 <- matrix(NA_integer_,nrow=ng,ncol=4)
l1[,3] <- rbinom(ng,1,18/38)
l1[1,1] <- sb
l1[1,2] <- 1
l1[1,4] <- ifelse(l1[1,3]==1, sb + 1, sb - 1)
for(i in 2:ng){
w <- martingale_wager(l1[i-1,2], l1[i-1,3], mw, l1[i-1,4])
e <- ifelse(l1[i,3]==1, l1[i-1,4] + w, l1[i-1,4] - w)
s <- e <= 0 | e >= wt
l1[i,c(1,2,4)] <- c(l1[i-1,4], w, e)
if(s) break
}
l1[1:i,]
}
sb <- seq(50, 500, by = 50)
ng <- 0*sb
for(i in 1:length(sb)){
ng[i] <- replicate(5000, one_series(100,sb[i],sb[i] +100,50) |> nrow()) |> mean()
}
plot(sb, ng, type = "l", xlab = "Starting Budget", ylab="Average Number of Games", main = "Average Number of Games Played Before Stopping at each Starting Budget")
max_games <- 1000
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
max_games <- 100
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(100,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
profit <- function(ledger){
n <- nrow(ledger)
profit <- ledger[n, "ending_budget"] - ledger[1, "starting_budget"]
return(profit)
}
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(100,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
one_series <- function(
max_games, starting_budget, winning_threshold, max_wager
){
# Initialize ledger
ledger <- data.frame(
game_index = 0:max_games
, starting_budget = NA_integer_
, wager = NA_integer_
, outcome = NA_character_
, ending_budget = NA_integer_
)
ledger[1, "wager"] <- 1
ledger[1, "outcome"] <- "red"
ledger[1, "ending_budget"] <- starting_budget
for(i in 2:nrow(ledger)){
#browser()
ledger[i,] <- one_play(ledger[i-1,], max_wager)
if(stopping_rule(ledger[i,], winning_threshold)) break
}
# Return non-empty portion of ledger
ledger[2:i, ]
}
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(100,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(2)
l2 <- one_series(100,200 ,300, 100)
plot(l2[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Winner example")
require(magrittr)
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == 1) return(1)
min(2*previous_wager, max_wager, current_budget)
}
profit <- function(l1) l1[nrow(l1),4] - l1[1,1]
one_series <- function(ng, sb, wt, mw){
# ng = max number of spins
# sb = starting budget
# wt = ending budget (starting budget + winning threshold)
# mw = max wager
l1 <- matrix(NA_integer_,nrow=ng,ncol=4)
l1[,3] <- rbinom(ng,1,18/38)
l1[1,1] <- sb
l1[1,2] <- 1
l1[1,4] <- ifelse(l1[1,3]==1, sb + 1, sb - 1)
for(i in 2:ng){
w <- martingale_wager(l1[i-1,2], l1[i-1,3], mw, l1[i-1,4])
e <- ifelse(l1[i,3]==1, l1[i-1,4] + w, l1[i-1,4] - w)
s <- e <= 0 | e >= wt
l1[i,c(1,2,4)] <- c(l1[i-1,4], w, e)
if(s) break
}
l1[1:i,]
}
sb <- seq(50, 500, by = 50)
ng <- 0*sb
for(i in 1:length(sb)){
ng[i] <- replicate(5000, one_series(100,sb[i],sb[i] +100,50) |> nrow()) |> mean()
}
plot(sb, ng, type = "l", xlab = "Starting Budget", ylab="Average Number of Games", main = "Average Number of Games Played Before Stopping at each Starting Budget")
# mimics the single spin of the roulette wheel
single_spin <- function(){
possible_outcomes <- c(rep("red",18), rep("black",18), rep("green",2))
sample(possible_outcomes, 1)
}
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == "red") return(1)
min(2*previous_wager, max_wager, current_budget)
}
one_play <- function(previous_ledger_entry, max_wager){
# Create a copy of the input object that will become the output object
#updates the game index and starting budget
out <- previous_ledger_entry
out[1, "game_index"] <- previous_ledger_entry[1, "game_index"] + 1
out[1, "starting_budget"] <- previous_ledger_entry[1, "ending_budget"]
out[1, "wager"] <- martingale_wager(
previous_wager = previous_ledger_entry[1, "wager"]
, previous_outcome = previous_ledger_entry[1, "outcome"]
, max_wager = max_wager
, current_budget = out[1, "starting_budget"]
)
out[1, "outcome"] <- single_spin()
out[1, "ending_budget"] <- out[1, "starting_budget"] +
ifelse(out[1, "outcome"] == "red", +1, -1)*out[1, "wager"]
return(out)
}
stopping_rule <- function(
ledger_entry
, winning_threshold
){
ending_budget <- ledger_entry[1, "ending_budget"]
if(ending_budget <= 0) return(TRUE)
if(ending_budget >= winning_threshold) return(TRUE)
FALSE
}
one_series <- function(
max_games, starting_budget, winning_threshold, max_wager
){
# Initialize ledger
ledger <- data.frame(
game_index = 0:max_games
, starting_budget = NA_integer_
, wager = NA_integer_
, outcome = NA_character_
, ending_budget = NA_integer_
)
ledger[1, "wager"] <- 1
ledger[1, "outcome"] <- "red"
ledger[1, "ending_budget"] <- starting_budget
for(i in 2:nrow(ledger)){
#browser()
ledger[i,] <- one_play(ledger[i-1,], max_wager)
if(stopping_rule(ledger[i,], winning_threshold)) break
}
# Return non-empty portion of ledger
ledger[2:i, ]
}
profit <- function(ledger){
n <- nrow(ledger)
profit <- ledger[n, "ending_budget"] - ledger[1, "starting_budget"]
return(profit)
}
max_games <- 100
starting_budget <- 200
winning_threshold <- 300
max_wager <- 100
R <- 100 # number of replicates
output <- rep(NA, R)
for(r in 1:R){
output[r] <-
one_series(max_games, starting_budget, winning_threshold, max_wager) %>%
profit()
}
plot(output, type = "l", main = "Profits Over Series of Games", xlab = "Game Index", ylab = "Profit")
require(magrittr)
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(1)
ledger <- one_series(100,200 , 300, 100)
plot(ledger[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Looser example")
par(cex.axis=2, cex.lab = 2, mar = c(8,8,2,2), bg = rgb(222, 235, 247, max = 255))
set.seed(2)
l2 <- one_series(100,200 ,300, 100)
plot(l2[,c(1,5)], type = "l", lwd = 5, xlab = "Game Index", ylab = "Budget", main = "Winner example")
max_games <- 1000
starting_budget <- 200
max_wager <- 100
winning_thresholds <- seq(100, 500, by = 50)
# used to keep each individual profit calculation based on wager
average_profits <- numeric(length(winning_thresholds))
# modify code from above to produce an output that we can graph
for (i in seq_along(winning_thresholds)) {
winning_threshold <- winning_thresholds[i]
output <- rep(NA, R)
for (r in 1:R) {
output[r] <- profit(one_series(max_games, starting_budget, winning_threshold, max_wager))
}
average_profits[i] <- mean(output)
}
graph_info <- data.frame(
Winning_Threshold = winning_thresholds,
Average_Profit = average_profits
)
plot(graph_info$Winning_Threshold, graph_info$Average_Profit, type = "l", lwd = 5, xlab = "winning treshold", ylab = "average profit", main = "how does average profit change as a function of winning treshold?")
require(magrittr)
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == 1) return(1)
min(2*previous_wager, max_wager, current_budget)
}
profit <- function(l1) l1[nrow(l1),4] - l1[1,1]
one_series <- function(ng, sb, wt, mw){
# ng = max number of spins
# sb = starting budget
# wt = ending budget (starting budget + winning threshold)
# mw = max wager
l1 <- matrix(NA_integer_,nrow=ng,ncol=4)
l1[,3] <- rbinom(ng,1,18/38)
l1[1,1] <- sb
l1[1,2] <- 1
l1[1,4] <- ifelse(l1[1,3]==1, sb + 1, sb - 1)
for(i in 2:ng){
w <- martingale_wager(l1[i-1,2], l1[i-1,3], mw, l1[i-1,4])
e <- ifelse(l1[i,3]==1, l1[i-1,4] + w, l1[i-1,4] - w)
s <- e <= 0 | e >= wt
l1[i,c(1,2,4)] <- c(l1[i-1,4], w, e)
if(s) break
}
l1[1:i,]
}
sb <- seq(50, 500, by = 50)
ng <- 0*sb
for(i in 1:length(sb)){
ng[i] <- replicate(5000, one_series(100,sb[i],sb[i] +100,50) |> nrow()) |> mean()
}
plot(sb, ng, type = "l", xlab = "Starting Budget", ylab="Average Number of Games", main = "Average Number of Games Played Before Stopping at each Starting Budget")
require(magrittr)
martingale_wager <- function(
previous_wager
, previous_outcome
, max_wager
, current_budget
){
if(previous_outcome == 1) return(1)
min(2*previous_wager, max_wager, current_budget)
}
profit <- function(l1) l1[nrow(l1),4] - l1[1,1]
one_series <- function(ng, sb, wt, mw){
# ng = max number of spins
# sb = starting budget
# wt = ending budget (starting budget + winning threshold)
# mw = max wager
l1 <- matrix(NA_integer_,nrow=ng,ncol=4)
l1[,3] <- rbinom(ng,1,18/38)
l1[1,1] <- sb
l1[1,2] <- 1
l1[1,4] <- ifelse(l1[1,3]==1, sb + 1, sb - 1)
for(i in 2:ng){
w <- martingale_wager(l1[i-1,2], l1[i-1,3], mw, l1[i-1,4])
e <- ifelse(l1[i,3]==1, l1[i-1,4] + w, l1[i-1,4] - w)
s <- e <= 0 | e >= wt
l1[i,c(1,2,4)] <- c(l1[i-1,4], w, e)
if(s) break
}
l1[1:i,]
}
sb <- seq(50, 500, by = 50)
ng <- 0*sb
for(i in 1:length(sb)){
ng[i] <- replicate(5000, one_series(100,sb[i],sb[i] +100,50) |> nrow()) |> mean()
}
plot(sb, ng, type = "l", xlab = "Starting Budget", ylab="Average Number of Games", main = "Average Number of Games Played Before Stopping at each Starting Budget")
