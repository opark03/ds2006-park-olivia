Table() |>
which( >=3) |>
first_duplicate <- function(){
sample(1:365, 366, replace=TRUE)
Table() |>
which( .>=3) |>
if (length(triplicate_dates) > 0) {
return(min(triplicate_dates))
} else {
return(NA)
}
}
first_duplicate <- function(){
sample(1:365, 366, replace=TRUE)
Table() |>
which(. >=3) |>
if (length(triplicate_dates) > 0) {
return(min(triplicate_dates))
} else {
return(NA)
}
}
# use variables instead of piping |> in order to use a loop to go through each instance created.
first_duplicate <- function(){
generate_class <- sample(1:365, 366, replace=TRUE)
birthday_counts <- table(generate_class)
# use the table function again to group birthdays
triple <- which(birthday_counts >= 3)
if (length(triple) > 0) {
return(min(triple))
} else {
return(NA)
}
}
R <- 10000
fd1 <- replicate(R, first_duplicate())
fd1 <- fd1[!is.na(fd1)]
plot(ecdf(fd1), main = "Probability of shared birthday (at least 3 people)", xlab = "Class size")
# use variables instead of piping |> in order to use a conditional to go through each instance created.
first_duplicate <- function(){
generate_class <- sample(1:365, 366, replace=TRUE)
birthday_counts <- table(generate_class)
# use the table function again to group birthdays
triple <- which(birthday_counts >= 3)
# use which function to get indices when there are 3 or more of the same birthdays
if (length(triple) > 0) {
return(min(triple))
} else {
return(NA)
}
# use a conditional to go through the instances. the min() function is used again to get the index of the first instance that there are 3 of the same birthdays. If there are not 3 or more duplicates, then NA will be returned
}
R <- 10000
fd1 <- replicate(R, first_duplicate())
fd1 <- fd1[!is.na(fd1)]
plot(ecdf(fd1), main = "Probability that at least 3 share a birthday", xlab = "Class size")
getwd()
getwd()
getwd()
setwd("~/Documents/GitHub/ds2006-park-olivia/Midterm 1")
getwd()
# Another way using version 1 of the code and a for loop:
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
check_birthday <- function(class){
class |>
table() |>
max() >= 3
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
cs1 <- 1:200
out <- cs1*0
for(j in 1:200){
replicates <- replicate(R, generate_class(55) |> check_birthday())
out[j] <- mean(replicates)
}
plot(cs1, out)
# another method using version 2 of the code:
```{r}
# Another way using version 1 of the code and a for loop:
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
check_birthday <- function(class){
class |>
table() |>
max() >= 3
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
cs1 <- 1:200
out <- cs1*0
for(j in 1:200){
replicates <- replicate(R, generate_class(55) |> check_birthday())
out[j] <- mean(replicates)
}
plot(cs1, )
# Another way using version 1 of the code and a for loop:
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
check_birthday <- function(class){
class |>
table() |>
max() >= 3
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
cs1 <- 1:200
out <- cs1*0
for(j in 1:200){
replicates <- replicate(R, generate_class(55) |> check_birthday())
out[j] <- mean(replicates)
}
plot(cs1, out)
# another method using version 2 of the code:
first_duplicate <- function(k){
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1){
# another method using version 2 of the code:
first_duplicate <- function(k){
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1){
# another method using version 2 of the code:
first_duplicate <- function(k){
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1){
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1){
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1) {
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1)) {
if(any(table(cr[1:i]) >= k)) return(i)
}
}
R <- 1000
fd1 <- replicate(R, first_duplicate(3))
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1)) {
if(any(table(cr[1:i]) >= k)) return(i)
}
}
R <- 1000
fd1 <- replicate(R, first_duplicate(3))
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1)) {
if(any(table(cr1[1:i]) >= k)) return(i)
}
}
R <- 1000
fd1 <- replicate(R, first_duplicate(3))
plot(ecdf(fd1), main = "probability that 3 or more share a bday", xlab= "class"
# another method using version 2 of the code:
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1)) {
if(any(table(cr1[1:i]) >= k)) return(i)
}
}
R <- 1000
fd1 <- replicate(R, first_duplicate(3))
plot(ecdf(fd1), main = "Probability of shared birthday", xlab = "Class size")
# Another way using version 1 of the code and a for loop:
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
check_birthday <- function(class){
class |>
table() |>
max() >= 3
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
R <- 1000
cs1 <- 1:200
out <- cs1*0
for(j in 1:200){
replicates <- replicate(R, generate_class(55) |> check_birthday())
out[j] <- mean(replicates)
}
plot(cs1, out)
# Another way using version 1 of the code and a for loop:
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
check_birthday <- function(class){
tb1 <- table(class)
any(tb1 >= 3)
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
R <- 1000
cs1 <- 1:200
out <- cs1*0
for(j in 1:200){
replicates <- replicate(R, generate_class(55) |> check_birthday())
out[j] <- mean(replicates)
}
plot(cs1, out)
?length
getwd()
setwd("~/Downloads")
setwd("/Users/oliviapark/Documents/GitHub/ds2006-park-olivia/Midterm 1")
getwd()
# Version 2 from HW 6
first_duplicate <- function(){
sample(1:365, 366, replace=TRUE) |>
duplicated() |>
which() |>
min()
}
R <- 10000
fd1 <- replicate(R, first_duplicate())
plot(ecdf(fd1), main = "Probability of shared birthday", xlab = "Class size")
![](test_files/figure-markdown_strict/birthday-probs-1.png)
# Version 2 from HW 6
first_duplicate <- function(){
sample(1:365, 366, replace=TRUE) |>
duplicated() |>
which() |>
min()
}
R <- 10000
fd1 <- replicate(R, first_duplicate())
plot(ecdf(fd1), main = "Probability of shared birthday", xlab = "Class size")
![](test_files/figure-markdown_strict/birthday-probs-1.png)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
generate_class(55) |>
table()
# use the table() function to sort the number of birthdays per day, then use the max() function to choose the number to times there are three or more birthdays on a single day
check_birthday <- function(class){
class |>
table() |>
max() >= 4
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
first_duplicate <- function(k) {
cr1 <- sample(1:365, 366*(k-1), replace=TRUE)
for(i in 1:length(cr1)) {
if(any(table(cr1[1:i]) >= k)) return(i)
}
}
R <- 1000
fd1 <- replicate(R, first_duplicate(4))
plot(ecdf(fd1), main = "Probability of shared birthday", xlab = "Class size")
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
descr:CrossTable(
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
pander(split.table=Inf)
widgets
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
generate_class(55) |>
table()
# use the table() function to sort the number of birthdays per day, then use the max() function to choose the number to times there are three or more birthdays on a single day
check_birthday <- function(class){
class |>
table() |>
max() >= 4
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
pander(split.table=Inf)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
widgets$machine
, widgets$defect
, prop.chisq = FALSE
) |>
pander(split.table=Inf)
require(pander)
widgets <- function(R){
descr::CrossTable(
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
d1$machine
, d1$defect
, prop.chisq = FALSE
) |>
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
widgets$machine
, widgets$defect
, prop.chisq = FALSE
) |>
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
widgets
)|>
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
widgets
)|>
pander(split.table=Inf)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
}
descr::CrossTable(
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
generate_class <- function(class_size){
sample(1:365, class_size, replace=TRUE)
}
generate_class(55) |>
table()
# use the table() function to sort the number of birthdays per day, then use the max() function to choose the number to times there are four or more birthdays on a single day
check_birthday <- function(class){
class |>
table() |>
max() >= 4
}
set.seed(230583)
R <- 10000
replicates <- replicate(R, generate_class(55) |> check_birthday())
mean(replicates)
require(dplyr)
require(pander)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
prop.chisq = FALSE
pander(split.table=Inf)
widgets <- function(R){
machine <- sample(c("A","B","C"), R, replace=TRUE,prob=c(4,2,1)/7)
defect <- rbinom(R,1,0.1*(machine=="A")+0.01*(machine=="B")+0.001*(machine=="C"))
data.frame(machine=machine, defect=defect)
}
